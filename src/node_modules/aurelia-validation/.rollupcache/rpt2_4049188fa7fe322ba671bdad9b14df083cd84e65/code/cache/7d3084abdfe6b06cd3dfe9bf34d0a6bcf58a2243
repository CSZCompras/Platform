{"code":"// tslint:disable:no-empty\r\nexport class ExpressionVisitor {\r\n    visitChain(chain) {\r\n        this.visitArgs(chain.expressions);\r\n    }\r\n    visitBindingBehavior(behavior) {\r\n        behavior.expression.accept(this);\r\n        this.visitArgs(behavior.args);\r\n    }\r\n    visitValueConverter(converter) {\r\n        converter.expression.accept(this);\r\n        this.visitArgs(converter.args);\r\n    }\r\n    visitAssign(assign) {\r\n        assign.target.accept(this);\r\n        assign.value.accept(this);\r\n    }\r\n    visitConditional(conditional) {\r\n        conditional.condition.accept(this);\r\n        conditional.yes.accept(this);\r\n        conditional.no.accept(this);\r\n    }\r\n    visitAccessThis(access) {\r\n        access.ancestor = access.ancestor;\r\n    }\r\n    visitAccessScope(access) {\r\n        access.name = access.name;\r\n    }\r\n    visitAccessMember(access) {\r\n        access.object.accept(this);\r\n    }\r\n    visitAccessKeyed(access) {\r\n        access.object.accept(this);\r\n        access.key.accept(this);\r\n    }\r\n    visitCallScope(call) {\r\n        this.visitArgs(call.args);\r\n    }\r\n    visitCallFunction(call) {\r\n        call.func.accept(this);\r\n        this.visitArgs(call.args);\r\n    }\r\n    visitCallMember(call) {\r\n        call.object.accept(this);\r\n        this.visitArgs(call.args);\r\n    }\r\n    visitPrefix(prefix) {\r\n        prefix.expression.accept(this);\r\n    }\r\n    visitBinary(binary) {\r\n        binary.left.accept(this);\r\n        binary.right.accept(this);\r\n    }\r\n    visitLiteralPrimitive(literal) {\r\n        literal.value = literal.value;\r\n    }\r\n    visitLiteralArray(literal) {\r\n        this.visitArgs(literal.elements);\r\n    }\r\n    visitLiteralObject(literal) {\r\n        this.visitArgs(literal.values);\r\n    }\r\n    visitLiteralString(literal) {\r\n        literal.value = literal.value;\r\n    }\r\n    visitArgs(args) {\r\n        for (let i = 0; i < args.length; i++) {\r\n            args[i].accept(this);\r\n        }\r\n    }\r\n}\r\n"}
