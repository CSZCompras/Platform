{"code":"import * as tslib_1 from \"tslib\";\r\nimport { TaskQueue } from 'aurelia-task-queue';\r\nimport { validateTrigger } from './validate-trigger';\r\nimport { ValidateBindingBehaviorBase } from './validate-binding-behavior-base';\r\nimport { bindingBehavior } from 'aurelia-binding';\r\n/**\r\n * Binding behavior. Indicates the bound property should be validated\r\n * when the validate trigger specified by the associated controller's\r\n * validateTrigger property occurs.\r\n */\r\nlet ValidateBindingBehavior = class ValidateBindingBehavior extends ValidateBindingBehaviorBase {\r\n    getValidateTrigger(controller) {\r\n        return controller.validateTrigger;\r\n    }\r\n};\r\nValidateBindingBehavior.inject = [TaskQueue];\r\nValidateBindingBehavior = tslib_1.__decorate([\r\n    bindingBehavior('validate')\r\n], ValidateBindingBehavior);\r\nexport { ValidateBindingBehavior };\r\n/**\r\n * Binding behavior. Indicates the bound property will be validated\r\n * manually, by calling controller.validate(). No automatic validation\r\n * triggered by data-entry or blur will occur.\r\n */\r\nlet ValidateManuallyBindingBehavior = class ValidateManuallyBindingBehavior extends ValidateBindingBehaviorBase {\r\n    getValidateTrigger() {\r\n        return validateTrigger.manual;\r\n    }\r\n};\r\nValidateManuallyBindingBehavior.inject = [TaskQueue];\r\nValidateManuallyBindingBehavior = tslib_1.__decorate([\r\n    bindingBehavior('validateManually')\r\n], ValidateManuallyBindingBehavior);\r\nexport { ValidateManuallyBindingBehavior };\r\n/**\r\n * Binding behavior. Indicates the bound property should be validated\r\n * when the associated element blurs.\r\n */\r\nlet ValidateOnBlurBindingBehavior = class ValidateOnBlurBindingBehavior extends ValidateBindingBehaviorBase {\r\n    getValidateTrigger() {\r\n        return validateTrigger.blur;\r\n    }\r\n};\r\nValidateOnBlurBindingBehavior.inject = [TaskQueue];\r\nValidateOnBlurBindingBehavior = tslib_1.__decorate([\r\n    bindingBehavior('validateOnBlur')\r\n], ValidateOnBlurBindingBehavior);\r\nexport { ValidateOnBlurBindingBehavior };\r\n/**\r\n * Binding behavior. Indicates the bound property should be validated\r\n * when the associated element is changed by the user, causing a change\r\n * to the model.\r\n */\r\nlet ValidateOnChangeBindingBehavior = class ValidateOnChangeBindingBehavior extends ValidateBindingBehaviorBase {\r\n    getValidateTrigger() {\r\n        return validateTrigger.change;\r\n    }\r\n};\r\nValidateOnChangeBindingBehavior.inject = [TaskQueue];\r\nValidateOnChangeBindingBehavior = tslib_1.__decorate([\r\n    bindingBehavior('validateOnChange')\r\n], ValidateOnChangeBindingBehavior);\r\nexport { ValidateOnChangeBindingBehavior };\r\n/**\r\n * Binding behavior. Indicates the bound property should be validated\r\n * when the associated element blurs or is changed by the user, causing\r\n * a change to the model.\r\n */\r\nlet ValidateOnChangeOrBlurBindingBehavior = class ValidateOnChangeOrBlurBindingBehavior extends ValidateBindingBehaviorBase {\r\n    getValidateTrigger() {\r\n        return validateTrigger.changeOrBlur;\r\n    }\r\n};\r\nValidateOnChangeOrBlurBindingBehavior.inject = [TaskQueue];\r\nValidateOnChangeOrBlurBindingBehavior = tslib_1.__decorate([\r\n    bindingBehavior('validateOnChangeOrBlur')\r\n], ValidateOnChangeOrBlurBindingBehavior);\r\nexport { ValidateOnChangeOrBlurBindingBehavior };\r\n"}
