{"code":"import { ValidationController } from './validation-controller';\r\nimport { Validator } from './validator';\r\nimport { PropertyAccessorParser } from './property-accessor-parser';\r\n/**\r\n * Creates ValidationController instances.\r\n */\r\nexport class ValidationControllerFactory {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    static get(container) {\r\n        return new ValidationControllerFactory(container);\r\n    }\r\n    /**\r\n     * Creates a new controller instance.\r\n     */\r\n    create(validator) {\r\n        if (!validator) {\r\n            validator = this.container.get(Validator);\r\n        }\r\n        const propertyParser = this.container.get(PropertyAccessorParser);\r\n        return new ValidationController(validator, propertyParser);\r\n    }\r\n    /**\r\n     * Creates a new controller and registers it in the current element's container so that it's\r\n     * available to the validate binding behavior and renderers.\r\n     */\r\n    createForCurrentScope(validator) {\r\n        const controller = this.create(validator);\r\n        this.container.registerInstance(ValidationController, controller);\r\n        return controller;\r\n    }\r\n}\r\nValidationControllerFactory['protocol:aurelia:resolver'] = true;\r\n"}
